<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sxsram.ssm.mapper.UserMapper">

	<resultMap type="com.sxsram.ssm.entity.UserExpand" id="queryUserRstMap">
		<id column="id" property="id" />
		<result column="username" property="username" />
		<result column="password" property="password" />
		<result column="province" property="province" />
		<result column="city" property="city" />
		<result column="area" property="area" />
		<result column="phone" property="phone" />
		<result column="openId" property="openId" />
		<result column="headImgUrl" property="headImgUrl" />
		<association property="role" javaType="com.sxsram.ssm.entity.RoleExpand">
			<id column="roleId" property="id" />
			<result column="roleName" property="roleName" />
			<result column="roleGrade" property="roleGrade" />
		</association>
		<association property="certification"
			javaType="com.sxsram.ssm.entity.Certification">
			<id column="certificationId" property="id" />
			<result column="name" property="name" />
			<result column="idcard" property="idcard" />
		</association>
	</resultMap>

	<resultMap type="com.sxsram.ssm.entity.UserExpand" id="queryUserAccoutRstMap">
		<id column="id" property="id" />
		<result column="username" property="username" />
		<result column="phone" property="phone" />
		<result column="openId" property="openId" />
		<association property="jfAccount"
			javaType="com.sxsram.ssm.entity.AccountExpand">
			<id column="jfAccountId" property="id" />
			<result column="jfaccountNo" property="accountNo" />
			<result column="jfaccountBalance" property="accountBalance" />
			<result column="jftotalPlatformIncomings" property="totalPlatformIncomings" />
			<result column="jftotalPlatformOutgoings" property="totalPlatformOutgoings" />
			<result column="jftotalUserIncomings" property="totalUserIncomings" />
			<result column="jftotalUserOutgoings" property="totalUserOutgoings" />
		</association>
		<association property="dlbAccount"
			javaType="com.sxsram.ssm.entity.AccountExpand">
			<id column="dlbAccountId" property="id" />
			<result column="dlbaccountNo" property="accountNo" />
			<result column="dlbaccountBalance" property="accountBalance" />
			<result column="dlbtotalPlatformIncomings" property="totalPlatformIncomings" />
			<result column="dlbtotalPlatformOutgoings" property="totalPlatformOutgoings" />
			<result column="dlbtotalUserIncomings" property="totalUserIncomings" />
			<result column="dlbtotalUserOutgoings" property="totalUserOutgoings" />
		</association>
		<association property="jdbAccount"
			javaType="com.sxsram.ssm.entity.AccountExpand">
			<id column="jdbAccountId" property="id" />
			<result column="jdbaccountNo" property="accountNo" />
			<result column="jdbaccountBalance" property="accountBalance" />
			<result column="jdbtotalPlatformIncomings" property="totalPlatformIncomings" />
			<result column="jdbtotalPlatformOutgoings" property="totalPlatformOutgoings" />
			<result column="jdbtotalUserIncomings" property="totalUserIncomings" />
			<result column="jdbtotalUserOutgoings" property="totalUserOutgoings" />
		</association>
		<association property="moneyAccount"
			javaType="com.sxsram.ssm.entity.AccountExpand">
			<id column="moneyAccountId" property="id" />
			<result column="moneyaccountNo" property="accountNo" />
			<result column="moneyaccountBalance" property="accountBalance" />
			<result column="moneytotalPlatformIncomings" property="totalPlatformIncomings" />
			<result column="moneytotalPlatformOutgoings" property="totalPlatformOutgoings" />
			<result column="moneytotalUserIncomings" property="totalUserIncomings" />
			<result column="moneytotalUserOutgoings" property="totalUserOutgoings" />
		</association>
		<association property="yljAccount"
			javaType="com.sxsram.ssm.entity.AccountExpand">
			<id column="yljAccountId" property="id" />
			<result column="yljaccountNo" property="accountNo" />
			<result column="yljaccountBalance" property="accountBalance" />
			<result column="yljtotalPlatformIncomings" property="totalPlatformIncomings" />
			<result column="yljtotalPlatformOutgoings" property="totalPlatformOutgoings" />
			<result column="yljtotalUserIncomings" property="totalUserIncomings" />
			<result column="yljtotalUserOutgoings" property="totalUserOutgoings" />
		</association>
	</resultMap>

	<resultMap type="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand"
		id="queryRwrMap">
		<id column="id" property="id" />
		<result column="operateType" property="operateType" />
		<result column="orderNo" property="orderNo" />
		<result column="operateNum" property="operateNum" />
		<result column="operateTime" property="operateTime" />
		<result column="operateState" property="operateState" />
		<result column="operateUserIp" property="operateUserIp" />
		<association property="user" javaType="com.sxsram.ssm.entity.UserExpand">
			<id column="userId" property="id" />
		</association>
	</resultMap>

	<select id="countUsername" resultType="int" parameterType="string">
		select
		count(*)
		from
		t_user
		where
		username = #{username}
	</select>
	<select id="countPhone" resultType="int" parameterType="string">
		select
		count(*)
		from
		t_user
		where
		phone = #{phone}
	</select>

	<select id="countOpenId" resultType="int" parameterType="string">
		select
		count(*)
		from
		t_user
		where
		openId = #{openId}
	</select>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewCertification" parameterType="com.sxsram.ssm.entity.Certification">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into
		t_certification
		values();
	</insert>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewUser" parameterType="com.sxsram.ssm.entity.UserExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into
		t_user(openId,username,password,province,city,area,phone,headImgUrl,certificationId,addTime)
		values(#{openId},#{username},md5(#{password}),#{province},#{city},#{area},#{phone},#{headImgUrl},#{certification.id},now())
	</insert>

	<update id="updateUserAccountInformation" parameterType="com.sxsram.ssm.entity.UserExpand">
		update
		t_user
		set
		jfAccountId = #{jfAccount.id},
		dlbAccountId =
		#{dlbAccount.id},
		moneyAccountId = #{moneyAccount.id},
		yljAccountId=#{yljAccount.id},
		jdbAccountId=#{jdbAccount.id}
		where
		id = #{id}
	</update>

	<update id="updateUserOpenId" parameterType="com.sxsram.ssm.entity.UserExpand">
		update
		t_user
		set
		openId = #{openId}
		where
		id = #{id}
	</update>
	
	<update id="updateCertification" parameterType="com.sxsram.ssm.entity.Certification">
		update
		t_certification
		set
		name = #{name}
		where
		id = #{id}
	</update>
	
	<select id="queryRoleByUserId" resultType="com.sxsram.ssm.entity.RoleExpand"
		parameterType="int">
		select
		r.*
		from
		t_user u join t_role r on u.roleId = r.id
		where
		u.id = #{id}
	</select>

	<select id="queryUserWhenLogin" resultMap="queryUserRstMap"
		parameterType="com.sxsram.ssm.entity.UserExpand">
		select
		u.*,r.roleName,r.roleGrade,c.name,c.idcard
		from
		t_user u join t_role r on u.roleId = r.id
		left join t_certification c
		on u.certificationId = c.id
		where
		(u.username=#{username} or
		u.phone=#{username}) and
		u.password=md5(#{password})
	</select>

	<select id="queryUserAccountInfo" resultMap="queryUserAccoutRstMap"
		parameterType="java.lang.String">
		select
		u.*,
		jf.accountNo as
		jfaccountNo,jf.accountBalance
		as jfaccountBalance,
		jf.totalPlatformIncomings as
		jftotalPlatformIncomings,
		jf.totalPlatformOutgoings as
		jftotalPlatformOutgoings,
		jf.totalUserIncomings as
		jftotalUserIncomings,
		jf.totalUserOutgoings as
		jftotalUserOutgoings,
		dlb.accountNo as dlbaccountNo,dlb.accountBalance
		as dlbaccountBalance,
		dlb.totalPlatformIncomings as
		dlbtotalPlatformIncomings,
		dlb.totalPlatformOutgoings as
		dlbtotalPlatformOutgoings,
		dlb.totalUserIncomings as
		dlbtotalUserIncomings,
		dlb.totalUserOutgoings
		as dlbtotalUserOutgoings,
		jdb.accountNo as jdbaccountNo,jdb.accountBalance
		as jdbaccountBalance,
		jdb.totalPlatformIncomings as
		jdbtotalPlatformIncomings,
		jdb.totalPlatformOutgoings as
		jdbtotalPlatformOutgoings,
		jdb.totalUserIncomings as
		jdbtotalUserIncomings,
		jdb.totalUserOutgoings
		as jdbtotalUserOutgoings,
		money.accountNo as
		moneyaccountNo,money.accountBalance as
		moneyaccountBalance,
		money.totalPlatformIncomings as
		moneytotalPlatformIncomings,
		money.totalPlatformOutgoings as
		moneytotalPlatformOutgoings,
		money.totalUserIncomings as
		moneytotalUserIncomings,
		money.totalUserOutgoings as
		moneytotalUserOutgoings,
		ylj.accountNo as
		yljaccountNo,ylj.accountBalance as yljaccountBalance,
		ylj.totalPlatformIncomings as yljtotalPlatformIncomings,
		ylj.totalPlatformOutgoings as yljtotalPlatformOutgoings,
		ylj.totalUserIncomings as yljtotalUserIncomings,
		ylj.totalUserOutgoings as yljtotalUserOutgoings
		from
		t_user u
		join
		t_jf_account jf
		on u.jfAccountId = jf.id
		join
		t_dlb_account dlb
		on
		u.dlbAccountId = dlb.id
		join t_money_account money
		on u.moneyAccountId =
		money.id
		join t_ylj_account ylj
		on u.yljAccountId
		= ylj.id
		join
		t_jdb_account jdb
		on
		u.jdbAccountId = jdb.id
		where
		u.id=#{keyWord} or u.openId = #{keyWord}
	</select>
	<select id="queryUserByOpenId" resultMap="queryUserRstMap"
		parameterType="java.lang.String">
		select
		u.*,r.roleName,r.roleGrade,c.name,c.idcard
		from
		t_user u join t_role r on u.roleId = r.id
		left join t_certification c
		on u.certificationId = c.id
		where
		u.openId = #{openId}
	</select>

	<select id="queryUserById" resultMap="queryUserRstMap"
		parameterType="int">
		select
		u.*,
		r.roleName,r.roleGrade,
		jf.accountNo as
		jfaccountNo,jf.accountBalance as jfaccountBalance,
		jf.totalPlatformIncomings as jftotalPlatformIncomings,
		jf.totalPlatformOutgoings as jftotalPlatformOutgoings,
		jf.totalUserIncomings as jftotalUserIncomings,
		jf.totalUserOutgoings as
		jftotalUserOutgoings,
		dlb.accountNo as dlbaccountNo,dlb.accountBalance
		as dlbaccountBalance,
		dlb.totalPlatformIncomings as
		dlbtotalPlatformIncomings,
		dlb.totalPlatformOutgoings as
		dlbtotalPlatformOutgoings,
		dlb.totalUserIncomings as
		dlbtotalUserIncomings,
		dlb.totalUserOutgoings as dlbtotalUserOutgoings,
		money.accountNo as moneyaccountNo,money.accountBalance as
		moneyaccountBalance,
		money.totalPlatformIncomings as
		moneytotalPlatformIncomings,
		money.totalPlatformOutgoings as
		moneytotalPlatformOutgoings,
		money.totalUserIncomings as
		moneytotalUserIncomings,
		money.totalUserOutgoings as
		moneytotalUserOutgoings,
		ylj.accountNo as
		yljaccountNo,ylj.accountBalance as yljaccountBalance,
		ylj.totalPlatformIncomings as yljtotalPlatformIncomings,
		ylj.totalPlatformOutgoings as yljtotalPlatformOutgoings,
		ylj.totalUserIncomings as yljtotalUserIncomings,
		ylj.totalUserOutgoings as yljtotalUserOutgoings
		from
		t_user u
		join t_role
		r
		on u.roleId = r.id
		join t_jf_account jf
		on u.jfAccountId = jf.id
		join
		t_dlb_account dlb
		on u.dlbAccountId = dlb.id
		join t_money_account money
		on u.moneyAccountId = money.id
		join t_ylj_account ylj
		on u.yljAccountId
		= ylj.id
		where
		u.id = #{id}
	</select>

	<select id="queryAllShoppingMalls" resultType="com.sxsram.ssm.entity.ShoppingMallExpand">
		select
		*
		from
		t_shopping_mall
		where
		locked = 0
	</select>

	<select id="queryShoppingMallById" resultType="com.sxsram.ssm.entity.ShoppingMallExpand">
		select
		*
		from
		t_shopping_mall
		where id=#{mallId}
	</select>
	
	<select id="queryEparchies" resultType="com.sxsram.ssm.entity.Address">
		select
		t2.*
		from
		t_address
		t1 join t_address t2 on t1.id = t2.parentId
		where
		t1.id = #{addrId}
	</select>

	<select id="queryCities" resultType="com.sxsram.ssm.entity.Address">
		select
		t2.*
		from
		t_address t1
		join t_address t2 on t1.id = t2.parentId
		where
		t1.id = #{addrId}
	</select>

	<select id="getMoneyAccountBalance" resultType="double"
		parameterType="int">
		select
		m.accountBalance
		from
		t_user u join t_money_account
		m on u.moneyAccountId = m.id
		where
		u.id = #{userId}
	</select>


	<select id="findIndentByIndentNo" resultType="com.sxsram.ssm.entity.Indent"
		parameterType="string">
		select
		*
		from
		t_indent
		where
		indentNo=#{indentNo}
	</select>

	<select id="queryUserByPhone" resultMap="queryUserRstMap"
		parameterType="string">
		select
		*
		from
		t_user u join t_role r on u.roleId = r.id
		left join t_certification c on u.certificationId = c.id
		where
		u.phone =
		#{phone}
	</select>

	<update id="updateIndentFlag" parameterType="int">
		update t_indent set
		flag = 1 where id = #{indentId}
	</update>

	<select id="findUserMoneyAccountById" resultType="com.sxsram.ssm.entity.AccountExpand"
		parameterType="int">
		select
		r.*
		from
		t_user u join t_money_account r on
		u.moneyAccountId = r.id
		where
		u.id = #{userId}
	</select>

	<update id="updateUserMoneyBalance" parameterType="com.sxsram.ssm.entity.AccountExpand">
		update
		t_money_account set accountBalance = #{accountBalance} where id =
		#{id}
	</update>
	
	<update id="updateUserMoneyTotalPlatformOutgoings" parameterType="com.sxsram.ssm.entity.AccountExpand">
		update
		t_money_account set totalPlatformOutgoings = #{totalPlatformOutgoings} where id =
		#{id}
	</update>
	<update id="updateUserMoneyTotalUserIncomings" parameterType="com.sxsram.ssm.entity.AccountExpand">
		update
		t_money_account set totalUserIncomings = #{totalUserIncomings} where id =
		#{id}
	</update>
	<update id="updateUserMoneyTotalUserOutgoings" parameterType="com.sxsram.ssm.entity.AccountExpand">
		update
		t_money_account set totalUserOutgoings = #{totalUserOutgoings} where id =
		#{id}
	</update>

	<insert id="insertNewMoneyChangeRecord" parameterType="com.sxsram.ssm.entity.AccountRecordExpand">
		insert into
		t_money_record(operation,operateTime,operateNum,operateDesc,accountId,operateObjId)
		values(#{operation},now(),#{operateNum},#{operateDesc},#{account.id}
		<if test="operateObj!=null">
			,#{operateObj.id})
		</if>
		<if test="operateObj==null">
			,null)
		</if>
	</insert>

	<select id="findUserJfAccountById" resultType="com.sxsram.ssm.entity.AccountExpand"
		parameterType="int">
		select
		r.*
		from
		t_user u join t_jf_account r on
		u.jfAccountId = r.id
		where
		u.id = #{userId}
	</select>

	<update id="updateUserJfBalance" parameterType="com.sxsram.ssm.entity.AccountExpand">
		update
		t_jf_account set accountBalance = #{accountBalance} where id =
		#{id}
	</update>

	<insert id="insertNewJfChangeRecord" parameterType="com.sxsram.ssm.entity.AccountRecordExpand">
		insert into
		t_jf_record(operation,operateTime,operateNum,operateDesc,accountId,operateObjId,balance)
		values(#{operation},now(),#{operateNum},#{operateDesc},#{account.id},1,#{balance})
	</insert>

	<insert id="insertNewJournalBookItem" parameterType="com.sxsram.ssm.entity.JournalBookExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into
		t_journal_book(indentId,businessId,clientId,commodityTypeId,commodityName,amount,premiumRates,giftJf,rewardJf,journalTime,flag,rewardId)
		values(#{indent.id},#{business.id},#{client.id},
		#{commodityType.id},#{commodityName},#{amount},#{premiumRates},#{giftJf},#{rewardJf},now(),#{flag}
		<if test="reward!=null">
			,#{reward.id})
		</if>
		<if test="reward==null">
			,null)
		</if>
	</insert>

	<select id="queryCommodityByParentId" resultType="com.sxsram.ssm.entity.CommodityType">
		select
		t2.*
		from
		t_commodity_type t1 join t_commodity_type t2 on t1.id = t2.parentId
		where
		t1.id = #{parentId}
	</select>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewJfAccount" parameterType="com.sxsram.ssm.entity.AccountExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_jf_account
		(accountNo,accountBalance,totalPlatformIncomings,totalPlatformOutgoings,totalUserIncomings,totalUserOutgoings,userId)
		values
		(#{accountNo},#{accountBalance},#{totalPlatformIncomings},#{totalPlatformOutgoings},#{totalUserIncomings},#{totalUserOutgoings},#{user.id})
	</insert>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewDlbAccount" parameterType="com.sxsram.ssm.entity.AccountExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_dlb_account
		(accountNo,accountBalance,totalPlatformIncomings,totalPlatformOutgoings,totalUserIncomings,totalUserOutgoings,userId)
		values
		(#{accountNo},#{accountBalance},#{totalPlatformIncomings},#{totalPlatformOutgoings},#{totalUserIncomings},#{totalUserOutgoings},#{user.id})
	</insert>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewMoneyAccount" parameterType="com.sxsram.ssm.entity.AccountExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_money_account
		(accountNo,accountBalance,totalPlatformIncomings,totalPlatformOutgoings,totalUserIncomings,totalUserOutgoings,userId)
		values
		(#{accountNo},#{accountBalance},#{totalPlatformIncomings},#{totalPlatformOutgoings},#{totalUserIncomings},#{totalUserOutgoings},#{user.id})
	</insert>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewYljAccount" parameterType="com.sxsram.ssm.entity.AccountExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_ylj_account
		(accountNo,accountBalance,totalPlatformIncomings,totalPlatformOutgoings,totalUserIncomings,totalUserOutgoings,userId)
		values
		(#{accountNo},#{accountBalance},#{totalPlatformIncomings},#{totalPlatformOutgoings},#{totalUserIncomings},#{totalUserOutgoings},#{user.id})
	</insert>
	
	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewJdbAccount" parameterType="com.sxsram.ssm.entity.AccountExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_jdb_account
		(accountNo,accountBalance,totalPlatformIncomings,totalPlatformOutgoings,totalUserIncomings,totalUserOutgoings,userId)
		values
		(#{accountNo},#{accountBalance},#{totalPlatformIncomings},#{totalPlatformOutgoings},#{totalUserIncomings},#{totalUserOutgoings},#{user.id})
	</insert>

	<select id="queryAllDlbRecords" resultType="com.sxsram.ssm.entity.AccountRecordExpand"
		parameterType="int">
		select
		dr.*
		from
		t_user u join t_dlb_account da on u.id =
		da.userId
		join t_dlb_record dr on da.id = dr.accountId
		where
		u.id =
		#{userId}
		order by dr.operateTime desc
		limit
		0,15
	</select>
	<select id="queryAllMoneyRecords" resultType="com.sxsram.ssm.entity.AccountRecordExpand"
		parameterType="int">
		select
		dr.*
		from
		t_user u join t_money_account da on u.id =
		da.userId
		join t_money_record dr on da.id = dr.accountId
		where
		u.id =
		#{userId}
		order by dr.operateTime desc
		limit
		0,15
	</select>
	<select id="queryAllJfRecords" resultType="com.sxsram.ssm.entity.AccountRecordExpand"
		parameterType="int">
		select
		dr.*
		from
		t_user u join t_jf_account da on u.id =
		da.userId
		join t_jf_record dr on da.id = dr.accountId
		where
		u.id =
		#{userId}
		order by dr.operateTime desc
		limit
		0,15
	</select>
	<select id="queryAllYljRecords" resultType="com.sxsram.ssm.entity.PlatformYljSavedRecordExpand"
		parameterType="int">
		select
		dr.*
		from
		t_user u join t_platform_ylj_saved_record
		dr on u.id = dr.userId
		where
		u.id = #{userId}
		order by
		dr.savedDate desc
		limit
		0,15
	</select>
	<select id="queryAllSyRecords"
		resultType="com.sxsram.ssm.entity.PlatformSyDistributedRecordExpand"
		parameterType="int">
		select
		dr.*
		from
		t_user u join
		t_platform_sy_distributed_record dr on u.id = dr.userId
		where
		u.id =
		#{userId}
		order by
		dr.operationTime desc
		limit
		0,15
	</select>

	<resultMap type="com.sxsram.ssm.entity.JournalBookExpand" id="queryJournalBooksMap">
		<id column="id" property="id" />
		<result column="amount" property="amount" />
		<result column="premiumRates" property="premiumRates" />
		<result column="commodityName" property="commodityName"/>
		<result column="giftJf" property="giftJf"/>
		<result column="rewardJf" property="rewardJf" />
		<result column="journalTime" property="journalTime" />
		<association property="business" javaType="com.sxsram.ssm.entity.UserExpand">
			<id column="businessId" property="id" />
			<result column="busername" property="username" />
			<result column="bphone" property="phone" />
		</association>
		<association property="client" javaType="com.sxsram.ssm.entity.UserExpand">
			<id column="clientId" property="id" />
			<result column="cusername" property="username" />
			<result column="cphone" property="phone" />
		</association>
		<association property="reward" javaType="com.sxsram.ssm.entity.UserExpand">
			<id column="rewardId" property="id" />
			<result column="username" property="username" />
			<result column="phone" property="phone" />
		</association>
	</resultMap>
	<select id="queryAllJournalBookRecordsByUserId" resultMap="queryJournalBooksMap"
		parameterType="int">
		select
		jb.*,b.username as busername,b.phone as bphone,c.username as cusername,c.phone as
		cphone,r.username ,r.phone
		from
		t_journal_book jb join t_user b on
		jb.businessId = b.id
		join t_user c
		on jb.clientId = c.id
		left join t_user
		r on jb.rewardId = r.id
		where
		b.id = #{userId}
		order by
		jb.journalTime
		desc
		limit
		0,15
	</select>
	<select id="queryAllJournalBookRecordsByClientId" resultMap="queryJournalBooksMap"
		parameterType="int">
		select
			jb.*,b.username as busername,b.phone as bphone,c.username as cusername,c.phone as cphone,r.username,r.phone
		from
			t_journal_book jb join t_user b on jb.businessId = b.id
			join t_user c on jb.clientId = c.id
			left join t_user r on jb.rewardId = r.id
		where
			c.id = #{userId}
		order by
			jb.journalTime desc
		limit
			0,15
	</select>
	<select id="queryFirstJournalBookByClientId" resultMap="queryJournalBooksMap"
		parameterType="int">
		select
			jb.*,b.username as busername,b.phone as bphone,c.username as cusername,c.phone as cphone,r.username,r.phone
		from
			t_journal_book jb join t_user b on jb.businessId = b.id
			join t_user c on jb.clientId = c.id
			left join t_user r on jb.rewardId = r.id
		where
			c.id = #{userId}
		order by
			journalTime asc
		limit 1
	</select>
	
	<select id="queryLastWithDrawRecord"
		resultType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand"
		parameterType="int">
		select
			rw.*
		from
			t_recharge_withdraw_record rw join t_user u on rw.userId = u.id
		where
			u.id = #{userId} and rw.operateType = 1 and operateState = 2
		order by 
			operateTime desc 
		limit 1
	</select>
	
	<select id="queryFirstWithDrawRecord"
		resultType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand"
		parameterType="int">
		select
			rw.*
		from
			t_recharge_withdraw_record rw join t_user u on rw.userId = u.id
		where
			u.id = #{userId} and rw.operateType = 1 and operateState = 2
		order by 
			operateTime asc 
		limit 1
	</select>

	<!-- parameterType: 指定输入参数类型是POJO，使用#{}指定POJO的属性名，MyBatis通过OGNL获取对象的属性值 -->
	<insert id="insertNewRechargeOrWithDrawRecord"
		parameterType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand">
		<!-- 将插入数据的主键返回，返回到user对象中 keyProperty: 将查询到的主键赋给 parameterType的哪个属性 order: 
			AFTER，插入之后执行查询 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_recharge_withdraw_record
		(operateType,orderNo,operateNum,serviceNum,operateTime,operateState,operateUserIp,userId)
		values
		(#{operateType},#{orderNo},#{operateNum},#{serviceNum},now(),#{operateState},#{operateUserIp},#{user.id})
	</insert>

	<update id="updateRechageOrWithDarwRecordState"
		parameterType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand">
		update
		t_recharge_withdraw_record
		set
		operateState = #{operateState}
		where
		id = #{id}
	</update>

	<select id="queryRechargeOrWithDarwRecord" resultMap="queryRwrMap"
		parameterType="string">
		select
		rw.*
		from
		t_recharge_withdraw_record rw join t_user u on rw.userId = u.id
		where
		rw.orderNo = #{orderNo}
	</select>
	
	<select id="queryAllWithDrawsRecords"
		resultType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand"
		parameterType="int">
		select
			rw.*
		from
			t_recharge_withdraw_record rw join t_user u on rw.userId = u.id
		where
			u.id = #{userId} and rw.operateType = 1 and operateState != 0
		order by
			rw.operateTime desc
		limit
			0,15
	</select>
	
	<select id="queryAllRechargeRecords"
		resultType="com.sxsram.ssm.entity.RechargeAndWithDrawRecordExpand"
		parameterType="int">
		select
			rw.*
		from
			t_recharge_withdraw_record rw join t_user u on rw.userId = u.id
		where
			u.id = #{userId} and rw.operateType = 0 and operateState != 0
		order by
			rw.operateTime desc
		limit
			0,15
	</select>
	
	<select id="queryCashFlag"
		resultType="int"
		parameterType="int">
		select
			getCashFlag
		from
			t_user
		where
			id = #{id}
	</select>
	
	<update id="updateCashFlag"
		parameterType="com.sxsram.ssm.entity.UserExpand">
		update t_user set getCashFlag = #{getCashFlag} where id=#{id}
	</update>
	
	<select id="queryWithDrawsRecordsByUserId"
		resultType="int"
		parameterType="int">
		select
			count(*)
		from
			t_recharge_withdraw_record
		where
			userId = #{id} and operateType = 1 and operateState = 2
	</select>
	
	<select id="queryCurrentMonthConsumeRecordCounts"
		resultType="int"
		parameterType="int">
		select 
			count(*)
		from
			t_journal_book
		where clientId = #{id} and (flag=1 or flag = 2) and (DATE_FORMAT(journalTime, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m'))
	</select>
	
	<select id="findGlobalParams" resultType="com.sxsram.ssm.entity.GlobalPrams">
		select 
			*
		from
			t_para_config
		where 
			flag = 0
	</select>
</mapper>